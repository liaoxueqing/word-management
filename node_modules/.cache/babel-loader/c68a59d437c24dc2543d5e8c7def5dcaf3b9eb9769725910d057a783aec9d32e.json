{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main\"\n};\nexport function render(_ctx, _cache) {\n  const _component_WordManagement = _resolveComponent(\"WordManagement\");\n  const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n  const _component_PoetryManagement = _resolveComponent(\"PoetryManagement\");\n  const _component_el_tabs = _resolveComponent(\"el-tabs\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_tabs, {\n    modelValue: _ctx.activeName,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.activeName = $event)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n      label: \"航认字\",\n      name: \"first\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_WordManagement, {\n        words: _ctx.words1,\n        \"onUpdate:words\": _cache[0] || (_cache[0] = updatedWords => _ctx.handleWordsUpdate('words2', updatedWords))\n      }, null, 8 /* PROPS */, [\"words\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      label: \"皓皓认字\",\n      name: \"second\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_WordManagement, {\n        words: _ctx.words2,\n        \"onUpdate:words\": _cache[1] || (_cache[1] = updatedWords => _ctx.handleWordsUpdate('words2', updatedWords))\n      }, null, 8 /* PROPS */, [\"words\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      label: \"航古诗背诵\",\n      name: \"third\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_PoetryManagement, {\n        poetryList: _ctx.poetries1\n      }, null, 8 /* PROPS */, [\"poetryList\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      label: \"皓皓古诗背诵\",\n      name: \"fourth\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_PoetryManagement, {\n        poetryList: _ctx.poetries2\n      }, null, 8 /* PROPS */, [\"poetryList\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_el_tabs","modelValue","_ctx","activeName","_cache","$event","default","_withCtx","_component_el_tab_pane","label","name","_component_WordManagement","words","words1","updatedWords","handleWordsUpdate","_","words2","_component_PoetryManagement","poetryList","poetries1","poetries2"],"sources":["/Users/xueqing/my-local-record/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n  <el-tabs v-model=\"activeName\">\n    <el-tab-pane label=\"航认字\" name=\"first\">\n      <WordManagement :words=\"words1\"\n                      @update:words=\"(updatedWords) => handleWordsUpdate('words2', updatedWords)\"\n      ></WordManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"皓皓认字\" name=\"second\">\n      <WordManagement :words=\"words2\"\n                      @update:words=\"(updatedWords) => handleWordsUpdate('words2', updatedWords)\"\n      ></WordManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"航古诗背诵\" name=\"third\">\n      <PoetryManagement :poetryList=\"poetries1\"></PoetryManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"皓皓古诗背诵\" name=\"fourth\">\n      <PoetryManagement  :poetryList=\"poetries2\"></PoetryManagement></el-tab-pane>\n  </el-tabs>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport WordManagement from './components/WordManagement.vue'\nimport PoetryManagement from './components/PoetryManagement.vue'\nimport { ElTabs, ElTabPane } from 'element-plus'\n\nconst activeName = ref('first')\n//todo 从文件读值\nconst words1 = ref([])\nconst words2 = ref([])\nconst poetries1 = ref(['静夜思'])\nconst poetries2 = ref(['春晓'])\nconst characterList = JSON.parse(localStorage.getItem('first')) || [];\nconst characterList = JSON.parse(localStorage.getItem('second')) || [];\n\nonMounted(() => {\n  words1.value = JSON.parse(localStorage.getItem('first')) || [];\n  words2.value = JSON.parse(localStorage.getItem('second')) || [];\n\n  // 执行初始化操作，比如：\n  // - 获取数据\n  // - 初始化第三方库\n  // - 添加事件监听器\n})\n\nconst handleWordsUpdate = (wordsRef, updatedWords) => {\n  // todo 修改值并写入文件\n  if (wordsRef === 'words1') {\n      words1.value = updatedWords\n    } else if (wordsRef === 'words2') {\n      words2.value = updatedWords\n    }\n}\n\n</script>\n\n<style>\n.main {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  margin: 60px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;;;;;uBAAjBC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBNC,YAAA,CAgBUC,kBAAA;IAlBZC,UAAA,EAEoBC,IAAA,CAAAC,UAAU;IAF9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEoBH,IAAA,CAAAC,UAAU,GAAAE,MAAA;;IAF9BC,OAAA,EAAAC,QAAA,CAGI,MAIc,CAJdR,YAAA,CAIcS,sBAAA;MAJDC,KAAK,EAAC,KAAK;MAACC,IAAI,EAAC;;MAHlCJ,OAAA,EAAAC,QAAA,CAIM,MAEkB,CAFlBR,YAAA,CAEkBY,yBAAA;QAFDC,KAAK,EAAEV,IAAA,CAAAW,MAAM;QACb,gBAAY,EAAAT,MAAA,QAAAA,MAAA,MAAGU,YAAY,IAAKZ,IAAA,CAAAa,iBAAiB,WAAWD,YAAY;;MAL/FE,CAAA;QAQIjB,YAAA,CAIcS,sBAAA;MAJDC,KAAK,EAAC,MAAM;MAACC,IAAI,EAAC;;MARnCJ,OAAA,EAAAC,QAAA,CASM,MAEkB,CAFlBR,YAAA,CAEkBY,yBAAA;QAFDC,KAAK,EAAEV,IAAA,CAAAe,MAAM;QACb,gBAAY,EAAAb,MAAA,QAAAA,MAAA,MAAGU,YAAY,IAAKZ,IAAA,CAAAa,iBAAiB,WAAWD,YAAY;;MAV/FE,CAAA;QAaIjB,YAAA,CAEcS,sBAAA;MAFDC,KAAK,EAAC,OAAO;MAACC,IAAI,EAAC;;MAbpCJ,OAAA,EAAAC,QAAA,CAcM,MAA6D,CAA7DR,YAAA,CAA6DmB,2BAAA;QAA1CC,UAAU,EAAEjB,IAAA,CAAAkB;MAAS,wC;MAd9CJ,CAAA;QAgBIjB,YAAA,CAC8ES,sBAAA;MADjEC,KAAK,EAAC,QAAQ;MAACC,IAAI,EAAC;;MAhBrCJ,OAAA,EAAAC,QAAA,CAiBM,MAA8D,CAA9DR,YAAA,CAA8DmB,2BAAA;QAA1CC,UAAU,EAAEjB,IAAA,CAAAmB;MAAS,wC;MAjB/CL,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}