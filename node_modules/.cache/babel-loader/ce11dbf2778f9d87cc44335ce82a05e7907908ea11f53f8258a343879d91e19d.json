{"ast":null,"code":"import { createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"ElTabs\"], {\n    modelValue: $setup.activeName,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.activeName = $event)\n  }, {\n    default: _withCtx(() => [_createVNode($setup[\"ElTabPane\"], {\n      label: \"航认字\",\n      name: \"first\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"WordManagement\"], {\n        words: $setup.words1,\n        \"onUpdate:words\": _cache[0] || (_cache[0] = updatedWords => $setup.handleWordsUpdate('words1', updatedWords))\n      }, null, 8 /* PROPS */, [\"words\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode($setup[\"ElTabPane\"], {\n      label: \"皓皓认字\",\n      name: \"second\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"WordManagement\"], {\n        words: $setup.words2,\n        \"onUpdate:words\": _cache[1] || (_cache[1] = updatedWords => $setup.handleWordsUpdate('words2', updatedWords))\n      }, null, 8 /* PROPS */, [\"words\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode($setup[\"ElTabPane\"], {\n      label: \"航古诗背诵\",\n      name: \"third\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"PoetryManagement\"], {\n        poetryList: $setup.poetries1\n      }, null, 8 /* PROPS */, [\"poetryList\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode($setup[\"ElTabPane\"], {\n      label: \"皓皓古诗背诵\",\n      name: \"fourth\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"PoetryManagement\"], {\n        poetryList: $setup.poetries2\n      }, null, 8 /* PROPS */, [\"poetryList\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode($setup[\"ElTabPane\"], {\n      label: \"管理字库\",\n      name: \"fifth\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"NewWordManagement\"], {\n        words: $setup.words1,\n        \"onUpdate:newWords\": $setup.addWords\n      }, null, 8 /* PROPS */, [\"words\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","$setup","modelValue","activeName","_cache","$event","default","_withCtx","label","name","words","words1","updatedWords","handleWordsUpdate","_","words2","poetryList","poetries1","poetries2","addWords"],"sources":["/Users/xueqing/my-local-record/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"main\">\n  <el-tabs v-model=\"activeName\">\n    <el-tab-pane label=\"航认字\" name=\"first\">\n      <WordManagement :words=\"words1\"\n                      @update:words=\"(updatedWords) => handleWordsUpdate('words1', updatedWords)\"\n      ></WordManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"皓皓认字\" name=\"second\">\n      <WordManagement :words=\"words2\"\n                      @update:words=\"(updatedWords) => handleWordsUpdate('words2', updatedWords)\"\n      ></WordManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"航古诗背诵\" name=\"third\">\n      <PoetryManagement :poetryList=\"poetries1\"></PoetryManagement>\n    </el-tab-pane>\n    <el-tab-pane label=\"皓皓古诗背诵\" name=\"fourth\">\n      <PoetryManagement  :poetryList=\"poetries2\"></PoetryManagement></el-tab-pane>\n    <el-tab-pane label=\"管理字库\" name=\"fifth\">\n      <NewWordManagement  :words=\"words1\"  @update:newWords=\"addWords\"></NewWordManagement>\n    </el-tab-pane>\n  </el-tabs>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport WordManagement from './components/WordManagement.vue'\nimport PoetryManagement from './components/PoetryManagement.vue'\nimport NewWordManagement from './components/NewWordManagement.vue'\nimport { ElTabs, ElTabPane } from 'element-plus'\n\nconst activeName = ref('first')\n//todo 从文件读值\nconst words1 = ref([])\nconst words2 = ref([])\nconst poetries1 = ref(['静夜思'])\nconst poetries2 = ref(['春晓'])\n\nonMounted(() => {\n  words1.value = JSON.parse(localStorage.getItem('first')) || [];\n  words2.value = JSON.parse(localStorage.getItem('second')) || [];\n})\n\nconst handleWordsUpdate = (wordsRef, updatedWords) => {\n  // todo 修改值并写入文件\n  if (wordsRef === 'words1') {\n      words1.value = updatedWords\n      localStorage.setItem('first', JSON.stringify(updatedWords));\n    } else if (wordsRef === 'words2') {\n      words2.value = updatedWords\n      localStorage.setItem('second', JSON.stringify(updatedWords));\n\n  }\n}\n\nconst addWords = (newWords) => {\n  if (!newWords.trim()) return; // 空值检查\n\n  // 分割并处理新单词\n  const newWordsArray = newWords\n  .split('').filter(word => word.trim() !== '');\n\n  // 去重逻辑\n  const existingWords = new Set(words1.value.map(item => item.text));\n\n  // 过滤掉已存在的单词\n  const uniqueNewWords = newWordsArray.filter(word =>\n    !existingWords.has(word)\n  );\n  if (!uniqueNewWords.length) {\n    return;\n  }\n\n  // 创建新单词对象数组\n  const newWordObjects = uniqueNewWords.map(word => ({\n    text: word,\n    status: ''\n  }));\n\n  // 更新数据\n  const updatedWords1 = [...words1.value, ...newWordObjects];\n  const updatedWords2 = [...words2.value, ...newWordObjects];\n\n  words1.value = updatedWords1;\n  words2.value = updatedWords2;\n\n  // 保存到本地存储\n  localStorage.setItem('first', JSON.stringify(updatedWords1));\n  localStorage.setItem('second', JSON.stringify(updatedWords2));\n}\n\n</script>\n\n<style>\n.main {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  margin: 60px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;uBAAjBC,mBAAA,CAqBM,OArBNC,UAqBM,GApBNC,YAAA,CAmBUC,MAAA;IArBZC,UAAA,EAEoBD,MAAA,CAAAE,UAAU;IAF9B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEoBJ,MAAA,CAAAE,UAAU,GAAAE,MAAA;;IAF9BC,OAAA,EAAAC,QAAA,CAGI,MAIc,CAJdP,YAAA,CAIcC,MAAA;MAJDO,KAAK,EAAC,KAAK;MAACC,IAAI,EAAC;;MAHlCH,OAAA,EAAAC,QAAA,CAIM,MAEkB,CAFlBP,YAAA,CAEkBC,MAAA;QAFDS,KAAK,EAAET,MAAA,CAAAU,MAAM;QACb,gBAAY,EAAAP,MAAA,QAAAA,MAAA,MAAGQ,YAAY,IAAKX,MAAA,CAAAY,iBAAiB,WAAWD,YAAY;;MAL/FE,CAAA;QAQId,YAAA,CAIcC,MAAA;MAJDO,KAAK,EAAC,MAAM;MAACC,IAAI,EAAC;;MARnCH,OAAA,EAAAC,QAAA,CASM,MAEkB,CAFlBP,YAAA,CAEkBC,MAAA;QAFDS,KAAK,EAAET,MAAA,CAAAc,MAAM;QACb,gBAAY,EAAAX,MAAA,QAAAA,MAAA,MAAGQ,YAAY,IAAKX,MAAA,CAAAY,iBAAiB,WAAWD,YAAY;;MAV/FE,CAAA;QAaId,YAAA,CAEcC,MAAA;MAFDO,KAAK,EAAC,OAAO;MAACC,IAAI,EAAC;;MAbpCH,OAAA,EAAAC,QAAA,CAcM,MAA6D,CAA7DP,YAAA,CAA6DC,MAAA;QAA1Ce,UAAU,EAAEf,MAAA,CAAAgB;MAAS,wC;MAd9CH,CAAA;QAgBId,YAAA,CAC8EC,MAAA;MADjEO,KAAK,EAAC,QAAQ;MAACC,IAAI,EAAC;;MAhBrCH,OAAA,EAAAC,QAAA,CAiBM,MAA8D,CAA9DP,YAAA,CAA8DC,MAAA;QAA1Ce,UAAU,EAAEf,MAAA,CAAAiB;MAAS,wC;MAjB/CJ,CAAA;QAkBId,YAAA,CAEcC,MAAA;MAFDO,KAAK,EAAC,MAAM;MAACC,IAAI,EAAC;;MAlBnCH,OAAA,EAAAC,QAAA,CAmBM,MAAqF,CAArFP,YAAA,CAAqFC,MAAA;QAAhES,KAAK,EAAET,MAAA,CAAAU,MAAM;QAAI,mBAAe,EAAEV,MAAA,CAAAkB;;MAnB7DL,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}